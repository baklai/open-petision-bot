import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { ConfigService } from '@nestjs/config';
import { Scenes } from 'telegraf';
import { Model } from 'mongoose';

import { User } from './schemas/user.schema';
import { Petition } from './schemas/petition.schema';

import { TelegramService } from './telegram/telegram.service';
import { ScrapersService } from './scrapers/scrapers.service';
import { TContext } from './telegram/telegram.module';

import {
  MAIN_COMMANDS,
  OPERATION_COMMANDS,
  SYSTEM_COMMANDS
} from './common/constants/commands.constant';
import { dateTimeToStr } from './common/utils/lib.utils';

@Injectable()
export class AppService {
  constructor(
    @InjectModel(User.name) private readonly userModel: Model<User>,
    @InjectModel(Petition.name) private readonly petitionModel: Model<Petition>,
    private readonly scrapersService: ScrapersService,
    private readonly telegramService: TelegramService,
    private readonly configService: ConfigService
  ) {
    this.telegramService.setBotMyCommands([
      ...MAIN_COMMANDS.commands,
      ...OPERATION_COMMANDS.commands
    ]);

    this.telegramService.setBotCommand('start', (ctx: TContext) => this.handlerCommandStart(ctx));
    this.telegramService.setBotCommand('help', (ctx: TContext) => this.handlerCommandHelp(ctx));
    this.telegramService.setBotCommand('about', (ctx: TContext) => this.handlerCommandAbout(ctx));
    this.telegramService.setBotCommand('quit', (ctx: TContext) => this.handlerCommandQuit(ctx));
    this.telegramService.setBotCommand('notice', (ctx: any) => this.handlerCommandNotice(ctx));
    this.telegramService.setBotCommand('admin', (ctx: any) => this.handlerCommandAdmin(ctx));
    this.telegramService.setBotCommand('update', (ctx: any) => this.handlerCommandUpdate(ctx));
    this.telegramService.setBotCommand('donate', (ctx: TContext) => this.handlerCommandDonate(ctx));
    this.telegramService.setBotCommand('petition', (ctx: TContext) =>
      this.handlerCommandPetition(ctx)
    );
    this.telegramService.setBotCommand('statistic', (ctx: TContext) =>
      this.handlerCommandStatistic(ctx)
    );

    this.initSceneQuit('quit');
    this.initSceneAdmin('admin');
    this.initSceneNotice('notice');
    this.initSceneUpdate('update');

    this.telegramService.setOnMessage((ctx: any) => this.onMessage(ctx));

    this.telegramService.setOn–°allbackQuery((ctx: any) => this.on–°allbackQuery(ctx));
  }

  createWebhookTelegramBot() {
    return this.telegramService.botLaunch();
  }

  statusTelegramBot(processUpdate: Record<string, any>): Record<string, any> {
    return processUpdate;
  }

  private async onMessage(ctx: any) {
    if (ctx?.update?.message?.text === '‚ùì –î–æ–≤—ñ–¥–∫–∞') {
      return await this.handlerCommandHelp(ctx);
    } else if (ctx?.update?.message?.text === 'üí∏ –î–æ–Ω–∞—Ç') {
      return await this.handlerCommandDonate(ctx);
    } else if (ctx?.update?.message?.text === '‚≠êÔ∏è –û–±—Ä–∞–Ω—ñ –ø–µ—Ç–∏—Ü—ñ—ó') {
      return await this.handlerPaginationPetition(ctx, '0:1:0');
    } else {
      return await ctx.replyWithHTML('‚úåÔ∏è –î—É–∂–µ —Ü—ñ–∫–∞–≤–æ, –∞–ª–µ —è –ø–æ–∫–∏ —â–æ –Ω–µ –≤–º—ñ—é –≤–µ—Å—Ç–∏ —Ä–æ–∑–º–æ–≤—É!', {});
    }
  }

  private async on–°allbackQuery(ctx: any) {
    const callbackData = ctx.callbackQuery.data;

    const { key, query } = JSON.parse(callbackData);

    switch (key) {
      case 'petition:selected':
        await this.handlerSelectedPetition(ctx, query);
        break;
      case 'petition:unselected':
        await this.handlerUnSelectedPetition(ctx, query);
        break;
      case 'pagination:first':
        await this.handlerPaginationPetition(ctx, query);
        break;
      case 'pagination:prev':
        await this.handlerPaginationPetition(ctx, query);
        break;
      case 'pagination:current':
        await this.handlerPaginationPetition(ctx, query);
        break;
      case 'pagination:next':
        await this.handlerPaginationPetition(ctx, query);
        break;
      case 'pagination:last':
        await this.handlerPaginationPetition(ctx, query);
        break;
      default:
        return await ctx.replyWithHTML('üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!', {});
    }
  }

  private async initSceneQuit(name: string) {
    const scene = new Scenes.BaseScene<any>(name);
    scene.enter(async ctx => {
      const message = [`üëãüëãüëã <b><i>${ctx.userInfo.firstName}</i>, –º–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è</b>!\n\n`];

      const user = await this.userModel.findOne({
        userID: ctx.userInfo.userID
      });

      if (!user) {
        message.push('‚ÄºÔ∏è –í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –º–µ–Ω–µ!\n\n');
        message.push('‚ÅâÔ∏è –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ /start!\n');
        return await ctx.replyWithHTML(message.join(''), {});
      }

      message.push('üëåü´£ –î–æ–±—Ä–µ, –¥–∞–≤–∞–π—Ç–µ –≤—ñ–¥–ø–∏—à—É –í–∞—Å.\n\n');
      message.push('<i>‚ÅâÔ∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ —â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –≤—ñ–¥ –º–µ–Ω–µ?</i>\n\n');
      message.push('üëá –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤–æ—î –Ω–∞–º—ñ—Ä—è–Ω–Ω—è');

      await ctx.replyWithHTML(message.join(''), {
        link_preview_options: {
          is_disabled: true
        },
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–¢–∞–∫ üíØ –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è!',
                callback_data: JSON.stringify({ key: 'quit:confirm:yes' })
              },
              {
                text: '–ù—ñ, –Ω–µ –≤—ñ–¥–ø–∏—Å—É–≤–∞—Ç–∏—Å—è!',
                callback_data: JSON.stringify({ key: 'quit:confirm:cancel' })
              }
            ]
          ]
        }
      });
    });

    scene.on<any>('callback_query', async (ctx: any) => {
      const callbackData = ctx.callbackQuery.data;

      ctx.session.callbackdata = callbackData;

      const { key, value } = JSON.parse(callbackData);

      const message = [`üëãüëãüëã <b><i>${ctx.userInfo.firstName}</i>, –º–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è</b>!\n\n`];

      switch (key) {
        case 'quit:confirm:yes':
          const user = await this.userModel.deleteOne({
            userID: ctx.userInfo.userID
          });

          if (!user) {
            message.push('‚ÄºÔ∏è –í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –º–µ–Ω–µ!\n\n');
            message.push('‚ÅâÔ∏è –í—ñ–¥–ø—Ä–∞–≤—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —â–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è!\n');
            return await ctx.replyWithHTML(message.join(''), {});
          }

          message.push('üëå –î–æ–±—Ä–µ, –≤–∏ –≤—ñ–¥–ø–∏—Å–∞–Ω—ñ –≤—ñ–¥ –±–æ—Ç—É!');

          await ctx.replyWithHTML(message.join(''), {});
          break;
        case 'quit:confirm:cancel':
          message.push(
            'üëå –î–æ–±—Ä–µ, –∫–æ–º–∞–Ω–¥–∞ –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.\n\n',
            '<i>‚ÅâÔ∏è –©–æ —è —â–µ –º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏ –¥–ª—è –≤–∞—Å?</i>'
          );
          await ctx.replyWithHTML(message.join(''), {});
          break;
        default:
          await ctx.replyWithHTML('üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!', {});
      }

      ctx.scene.leave();
    });

    this.telegramService.registerBotScene(scene);
  }

  private async initSceneAdmin(name: string) {
    const scene = new Scenes.BaseScene<any>(name);
    scene.enter(async ctx => {
      const message = [
        'üëå –î–æ–±—Ä–µ, –¥–∞–≤–∞–π—Ç–µ –æ—Ç—Ä–∏–º–∞—î–º–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n',
        'üëâ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á'
      ];

      ctx.replyWithHTML(message.join(''));
    });

    scene.on<any>('text', async (ctx: any) => {
      const secret = this.configService.get<string>('SECRET');
      ctx.session.secret = ctx.message.text;

      if (ctx.session.secret === secret) {
        const user = await this.userModel.findOneAndUpdate(
          { userID: ctx.userInfo.userID },
          { $set: { isAdmin: true } },
          { new: true }
        );

        if (user && user?.isAdmin) {
          ctx.replyWithHTML('üëå –î–æ–±—Ä–µ, –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥–∞–Ω–æ!');
        } else {
          ctx.replyWithHTML('üí¢ <b>–£–ø—Å</b>, —É –ø—Ä–∞–≤–∞—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ!');
        }
      } else {
        ctx.replyWithHTML('üí¢ <b>–£–ø—Å</b>, —É –ø—Ä–∞–≤–∞—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ!');
      }

      ctx.scene.leave();
    });

    this.telegramService.registerBotScene(scene);
  }

  private async initSceneNotice(name: string) {
    const scene = new Scenes.BaseScene<any>(name);
    scene.enter(async ctx => {
      const user = await this.userModel.findOne({ userID: ctx.userInfo.userID });

      if (!user || !user?.isAdmin) {
        ctx.replyWithHTML('üí¢ <b>–£–ø—Å!</b> –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω—å!');
        return ctx.scene.leave();
      }

      const message = [
        'üëå –î–æ–±—Ä–µ, –¥–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–µ–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!\n\n',
        'üëâ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
      ];

      ctx.replyWithHTML(message.join(''));
    });

    scene.on<any>('text', async (ctx: any) => {
      ctx.session.message = ctx.message.text;

      try {
        const users = await this.userModel.find({}).select({ userID: 1 });
        users.forEach(async ({ userID }) => {
          try {
            await this.telegramService.sendMessage(userID, ctx.session.message);
          } catch (err) {
            if (err?.response?.error_code === 403) {
              console.error(err?.response?.description);
              await this.userModel.findOneAndDelete({ userID: userID });
            }
          }
        });
        ctx.replyWithHTML('üí™ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.');
      } catch (err) {
        ctx.replyWithHTML(
          `üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!. –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <i>${err.message}</i>`
        );
      } finally {
        ctx.scene.leave();
      }
    });

    this.telegramService.registerBotScene(scene);
  }

  private async initSceneUpdate(name: string) {
    const scene = new Scenes.BaseScene<any>(name);
    scene.enter(async ctx => {
      const user = await this.userModel.findOne({ userID: ctx.userInfo.userID });

      if (!user || !user?.isAdmin) {
        ctx.replyWithHTML('üí¢ <b>–£–ø—Å!</b> –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω—å!');
        return ctx.scene.leave();
      }

      const message = [
        `üëãüëãüëã <b><i>${ctx.userInfo.firstName}</i>, –º–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è</b>!`,
        '\n\n',
        'üëå –î–æ–±—Ä–µ, –¥–∞–≤–∞–π—Ç–µ –æ–Ω–æ–≤–∏–º–æ –ø–µ—Ä–µ–ª—ñ–∫ –ø–µ—Ç–∏—Ü—ñ–π!\n\n',
        'üëâ –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—É—Å –ø–µ—Ç–∏—Ü—ñ—ó –∑—ñ —Å–ø–∏—Å–∫—É.'
      ];

      ctx.replyWithHTML(message.join(''), {
        link_preview_options: { is_disabled: true },
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–¢–†–ò–í–ê–Ñ –ó–ë–Ü–† –ü–Ü–î–ü–ò–°–Ü–í',
                callback_data: JSON.stringify({ key: 'update:petition:active' })
              }
            ],
            [
              {
                text: '–ù–ê –†–û–ó–ì–õ–Ø–î–Ü',
                callback_data: JSON.stringify({ key: 'update:petition:inprocess' })
              }
            ],
            [
              {
                text: '–ó –í–Ü–î–ü–û–í–Ü–î–î–Æ',
                callback_data: JSON.stringify({ key: 'update:petition:processed' })
              }
            ]
          ]
        }
      });
    });

    scene.on<any>('callback_query', async (ctx: any) => {
      ctx.session.callbackdata = ctx.callbackQuery.data;

      const user = await this.userModel.findOne({ userID: ctx.userInfo.userID });

      if (!user || !user?.isAdmin) {
        ctx.replyWithHTML('üí¢ <b>–£–ø—Å!</b> –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω—å!');
        return ctx.scene.leave();
      }

      const { key } = JSON.parse(ctx.session.callbackdata);

      switch (key) {
        case 'update:petition:active':
          this.scrapersService.handlePetitionScrape({ status: 'active' });
          await ctx.replyWithHTML(
            `üëå –î–æ–±—Ä–µ, –∑–∞–ø—É—â–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–ª—ñ–∫—É –ø–µ—Ç–∏—Ü—ñ–π! –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å!`
          );
          break;
        case 'update:petition:inprocess':
          this.scrapersService.handlePetitionScrape({ status: 'in_process' });
          await ctx.replyWithHTML(
            `üëå –î–æ–±—Ä–µ, –∑–∞–ø—É—â–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–ª—ñ–∫—É –ø–µ—Ç–∏—Ü—ñ–π! –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å!`
          );
          break;
        case 'update:petition:processed':
          this.scrapersService.handlePetitionScrape({ status: 'processed' });
          await ctx.replyWithHTML(
            `üëå –î–æ–±—Ä–µ, –∑–∞–ø—É—â–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–ª—ñ–∫—É –ø–µ—Ç–∏—Ü—ñ–π! –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å!`
          );
          break;
        default:
          await ctx.replyWithHTML('üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!', {});
      }

      ctx.scene.leave();
    });

    this.telegramService.registerBotScene(scene);
  }

  private async handlerCommandStart(ctx: TContext) {
    const message = [
      `üëãüëãüëã <b><i>${ctx.userInfo.firstName}</i>, –º–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è</b>!`,
      '\n\n',
      '‚òùÔ∏è –ì—Ä–æ–º–∞–¥—è–Ω–∏ –º–æ–∂—É—Ç—å –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –£–∫—Ä–∞—ó–Ω–∏ –∑ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–º–∏ –ø–µ—Ç–∏—Ü—ñ—è–º–∏ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Ä–æ–∑–¥—ñ–ª –≤–µ–±-—Å–∞–π—Ç—É –û—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏—Ü—Ç–≤–∞ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –£–∫—Ä–∞—ó–Ω–∏.',
      '\n\n',
      '<i>üí™ –Ø –¥–æ–ø–æ–º–æ–∂—É –±—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏—Ö –≥—Ä–æ–º–∞–¥—Å—å–∫–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞—Ç–∏–≤ —Ç–∞ –ª–µ–≥–∫–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –ø–µ—Ç–∏—Ü—ñ—ó, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –í–∞—à–∏–º —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º —Ç–∞ –ø–æ–≥–ª—è–¥–∞–º.</i>',
      '\n\n',
      'üëâ –ù–∞–¥—ñ—à–ª—ñ—Ç—å <b>/help</b> –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥'
    ];

    await ctx.replyWithHTML(message.join(''), {
      link_preview_options: { is_disabled: true },
      reply_markup: {
        resize_keyboard: true,
        keyboard: [[{ text: '‚≠êÔ∏è –û–±—Ä–∞–Ω—ñ –ø–µ—Ç–∏—Ü—ñ—ó' }], [{ text: '‚ùì –î–æ–≤—ñ–¥–∫–∞' }, { text: 'üí∏ –î–æ–Ω–∞—Ç' }]]
      }
    });

    const { userID } = ctx.userInfo;

    const user = await this.userModel.findOne({ userID });

    if (user) {
      return await this.userModel.findByIdAndUpdate(user.id, { ...ctx.userInfo });
    } else {
      return await this.userModel.create({ ...ctx.userInfo });
    }
  }

  private async handlerCommandHelp(ctx: TContext) {
    const user = await this.userModel.findOne({ userID: ctx.userInfo.userID });

    const message = [
      `üëãüëãüëã <b><i>${ctx.userInfo.firstName}</i>, –º–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è</b>!`,
      '\n\n',
      '‚òùÔ∏è –Ø –¥–æ–ø–æ–º–æ–∂—É –í–∞–º –±—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏—Ö –≥—Ä–æ–º–∞–¥—Å—å–∫–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞—Ç–∏–≤ —Ç–∞ –ª–µ–≥–∫–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –ø–µ—Ç–∏—Ü—ñ—ó, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –í–∞—à–∏–º —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º —Ç–∞ –ø–æ–≥–ª—è–¥–∞–º. –í–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –º–Ω–æ—é, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:',
      '\n\n',
      `${MAIN_COMMANDS.commands.map(item => `/${item.command} - ${item.description}`).join('\n')}\n\n`,
      `<b><i>${OPERATION_COMMANDS.description}</i></b>\n`,
      `${OPERATION_COMMANDS.commands.map(item => `/${item.command} - ${item.description}`).join('\n')}\n\n`
    ];

    if (user?.isAdmin) {
      message.push(`<b><i>${SYSTEM_COMMANDS.description}</i></b>\n`);
      message.push(
        `${SYSTEM_COMMANDS.commands.map(item => `/${item.command} - ${item.description}`).join('\n')}`
      );
    }

    await ctx.replyWithHTML(message.join(''), {
      link_preview_options: { is_disabled: true },
      reply_markup: {
        resize_keyboard: true,
        keyboard: [[{ text: '‚≠êÔ∏è –û–±—Ä–∞–Ω—ñ –ø–µ—Ç–∏—Ü—ñ—ó' }], [{ text: '‚ùì –î–æ–≤—ñ–¥–∫–∞' }, { text: 'üí∏ –î–æ–Ω–∞—Ç' }]]
      }
    });
  }

  private async handlerCommandAbout(ctx: TContext) {
    const message = [
      '‚òùÔ∏è <b><i>—î–ü–µ—Ç–∏—Ü—ñ—è</i></b> - –¶–µ–π –±–æ—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–±–∏—Ä–∞–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–∞–π–∞–∫—Ç—É–∞–ª—å–Ω—ñ—à—ñ –ø–µ—Ç–∏—Ü—ñ—ó, —â–æ –ø–æ–¥–∞–Ω—ñ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—É. –í—ñ–Ω –¥–æ–ø–æ–º–∞–≥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏—Ö –≥—Ä–æ–º–∞–¥—Å—å–∫–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞—Ç–∏–≤ —Ç–∞ –ª–µ–≥–∫–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –ø–µ—Ç–∏—Ü—ñ—ó, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —ó—Ö–Ω—ñ–º —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º —Ç–∞ –ø–æ–≥–ª—è–¥–∞–º.',
      '\n\n',
      'üëâ –ù–∞–¥—ñ—à–ª—ñ—Ç—å <b>/help</b> –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥',
      '\n\n',
      `‚úåÔ∏è Created by <a href=\"${'https://t.me/baklai'}\">Dmitrii Baklai</a> ¬© ${new Date().getFullYear()}.`
    ];

    await ctx.replyWithHTML(message.join(''), {
      link_preview_options: { is_disabled: true },
      reply_markup: {
        resize_keyboard: true,
        keyboard: [[{ text: '‚≠êÔ∏è –û–±—Ä–∞–Ω—ñ –ø–µ—Ç–∏—Ü—ñ—ó' }], [{ text: '‚ùì –î–æ–≤—ñ–¥–∫–∞' }, { text: 'üí∏ –î–æ–Ω–∞—Ç' }]]
      }
    });
  }

  private async handlerCommandNotice(ctx: any) {
    return ctx.scene.enter('notice');
  }

  private async handlerCommandAdmin(ctx: any) {
    return ctx.scene.enter('admin');
  }

  private async handlerCommandUpdate(ctx: any) {
    return ctx.scene.enter('update');
  }

  private async handlerCommandQuit(ctx: any) {
    return ctx.scene.enter('quit');
  }

  private async handlerCommandDonate(ctx: TContext) {
    const message = [
      `üëãüëãüëã <b><i>${ctx.userInfo.firstName}</i>, –º–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è</b>!`,
      '\n\n',
      'üëå –î–æ–±—Ä–µ, —è–∫—â–æ –≤–∏ –≤–∏—Ä—ñ—à–∏–ª–∏ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–≤–∏—Ç–æ–∫ –±–æ—Ç—É —Ç–æ –Ω–µ –∑—É–ø–∏–Ω—è–π—Ç–µ—Å—å!',
      '\n\n',
      '<i>üëâ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—ñ üëá</i>',
      '\n\n',
      'üëâ –ù–∞–¥—ñ—à–ª—ñ—Ç—å <b>/help</b> –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥',
      '\n\n',
      `‚úåÔ∏è Created by <a href=\"${'https://t.me/baklai'}\">Dmitrii Baklai</a> ¬© ${new Date().getFullYear()}.`
    ];

    await ctx.replyWithHTML(message.join(''), {
      link_preview_options: { is_disabled: true },
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí∏ –î–û–ù–ê–¢ –ù–ê –†–û–ó–í–ò–¢–û–ö', url: this.configService.get<string>('DONATE') }]
        ]
      }
    });
  }

  private async handlerCommandStatistic(ctx: TContext) {
    const usersCount = await this.userModel.countDocuments();

    const user = await this.userModel.findOne({ userID: ctx.userInfo.userID });

    const petitionCount = await this.petitionModel.countDocuments();

    const petitionStatusCount = await this.petitionModel.aggregate([
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 }
        }
      },
      {
        $project: {
          _id: 0,
          status: '$_id',
          count: 1
        }
      }
    ]);

    const petitionTagCount = await this.petitionModel.aggregate([
      {
        $group: {
          _id: '$tag',
          count: { $sum: 1 }
        }
      },
      {
        $project: {
          _id: 0,
          tag: '$_id',
          count: 1
        }
      }
    ]);

    const message = [
      'üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–¥–∞—Ç–∫—É</b>\n\n',
      user?.isAdmin ? `üë§ <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${usersCount}</b>\n\n` : '',
      `‚≠êÔ∏è <b>–û–±—Ä–∞–Ω—ñ –ü–µ—Ç–∏—Ü—ñ—ó:</b> ${user?.petitions?.length || 0}`,
      '\n\n',
      `üîñ <b>–ü–µ—Ç–∏—Ü—ñ–π –∑–∞–≥–∞–ª–æ–º:</b> ${petitionCount || 0}`,
      '\n\n',
      `üîñ <b>–ü–µ—Ç–∏—Ü—ñ—ó –∑–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏:</b>\n`,
      ...petitionStatusCount.map((item: any) => `<i> ‚ñ´Ô∏è ${item.status}: ${item.count}</i>\n`),
      '\n',
      `üîñ <b>–ü–µ—Ç–∏—Ü—ñ—ó –∑–∞ —Ç–µ–º–∞–º–∏:</b>\n`,
      ...petitionTagCount.map(
        (item: any) => `<i> ‚ñ´Ô∏è ${item.tag?.replaceAll('#', '')}: ${item.count}</i>\n`
      ),
      '\n\n',
      'üëâ –ù–∞–¥—ñ—à–ª—ñ—Ç—å <b>/help</b> –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥'
    ];

    await ctx.replyWithHTML(message.join(''), {
      link_preview_options: { is_disabled: true },
      reply_markup: {
        resize_keyboard: true,
        keyboard: [[{ text: '‚≠êÔ∏è –û–±—Ä–∞–Ω—ñ –ø–µ—Ç–∏—Ü—ñ—ó' }], [{ text: '‚ùì –î–æ–≤—ñ–¥–∫–∞' }, { text: 'üí∏ –î–æ–Ω–∞—Ç' }]]
      }
    });
  }

  private async handlerCommandPetition(ctx: any) {
    await this.handlerPaginationPetition(ctx, '0:0:0');
  }

  private async handlerSelectedPetition(ctx: any, query: string) {
    await this.userModel.findOneAndUpdate(
      { userID: ctx.userInfo.userID },
      { $addToSet: { petitions: query } },
      { new: true }
    );

    return await ctx.answerCbQuery(`–ü–µ—Ç–∏—Ü—ñ—é ${query} –¥–æ–¥–∞–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–æ–≥–æ!`, { show_alert: true });
  }

  private async handlerUnSelectedPetition(ctx: any, query: string) {
    await this.userModel.findOneAndUpdate(
      { userID: ctx.userInfo.userID },
      { $pull: { petitions: query } },
      { new: true }
    );

    await ctx.answerCbQuery(`–ü–µ—Ç–∏—Ü—ñ—é ${query} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –æ–±—Ä–∞–Ω–æ–≥–æ!`, { show_alert: true });
    await this.handlerPaginationPetition(ctx, '0:1:1');
  }

  private async handlerPaginationPetition(ctx: any, query: string) {
    const [offset = 0, selected = 0, editable = 0] = query.split(':').map(Number);

    const user = selected ? await this.userModel.findOne({ userID: ctx.userInfo.userID }) : null;

    const petitionsCount = selected
      ? await this.petitionModel.countDocuments({ number: { $in: user?.petitions || [] } })
      : await this.petitionModel.countDocuments({ status: '–¢—Ä–∏–≤–∞—î –∑–±—ñ—Ä –ø—ñ–¥–ø–∏—Å—ñ–≤' });

    const [petition] = selected
      ? await this.petitionModel
          .find({ number: { $in: user?.petitions || [] } })
          .skip(offset)
          .limit(1)
      : await this.petitionModel.find({ status: '–¢—Ä–∏–≤–∞—î –∑–±—ñ—Ä –ø—ñ–¥–ø–∏—Å—ñ–≤' }).skip(offset).limit(1);

    const message = [];

    if (!petition) {
      message.push(`üëãüëãüëã <b><i>${ctx.userInfo.firstName}</i>, –º–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è</b>!\n\n`);

      selected
        ? message.push(
            'üó£ <b>–í–∞—à –ø–µ—Ä–µ–ª—ñ–∫ –æ–±—Ä–∞–Ω–∏—Ö –ø–µ—Ç–∏—Ü—ñ–π –ø–æ—Ä–æ–∂–Ω—ñ–π!</b> –î–æ–¥–∞–π—Ç–µ –ø–µ—Ç–∏—Ü—ñ—é –¥–æ –æ–±—Ä–∞–Ω–æ–≥–æ, —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è!\n\n'
          )
        : message.push(
            'üó£ <b>–ü–µ—Ä–µ–ª—ñ–∫ –ø–µ—Ç–∏—Ü—ñ–π –ø–æ—Ä–æ–∂–Ω—ñ–π!</b> –ú–∏ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ —Ç–∏–º —â–æ–± –ø–µ—Ç–∏—Ü—ñ—ó —Å—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –≤ –Ω–∞–π–±–ª–∏–∂—á–∏–π —á–∞—Å!\n\n'
          );

      message.push('üëâ –ù–∞–¥—ñ—à–ª—ñ—Ç—å <b>/petition</b> –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–µ—Ä–µ–ª—ñ–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–µ—Ç–∏—Ü—ñ–π\n\n');

      message.push('üëâ –ù–∞–¥—ñ—à–ª—ñ—Ç—å <b>/help</b> –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥');

      return await ctx.replyWithHTML(message.join(''), {
        link_preview_options: { is_disabled: true },
        reply_markup: {
          resize_keyboard: true,
          keyboard: [
            [{ text: '‚≠êÔ∏è –û–±—Ä–∞–Ω—ñ –ø–µ—Ç–∏—Ü—ñ—ó' }],
            [{ text: '‚ùì –î–æ–≤—ñ–¥–∫–∞' }, { text: 'üí∏ –î–æ–Ω–∞—Ç' }]
          ]
        }
      });
    }

    message.push(`<blockquote>`);
    message.push(`# ${petition?.tag}\n\n`);
    message.push(`<b><a href="${petition.link}">${petition?.title}</a></b>\n\n`);
    message.push(`</blockquote>\n`);
    message.push(`‚ñ´Ô∏è <b>–ù–æ–º–µ—Ä –ø–µ—Ç–∏—Ü—ñ—ó</b>: ${petition?.number}\n`);
    message.push(`‚ñ´Ô∏è <b>–°—Ç–∞—Ç—É—Å</b>: ${petition?.status}\n`);
    message.push(`‚ñ´Ô∏è <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–ª–æ—Å—ñ–≤</b>: ${petition?.counts}\n`);
    message.push(`‚ñ´Ô∏è <b>–î–∞—Ç–∞ –æ–ø—Ä–∏–ª—é–¥–Ω–µ–Ω–Ω—è</b>: ${petition?.dateOfP}\n\n`);
    message.push(`<i>–î–∞—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${dateTimeToStr(petition?.updatedAt)}</i>\n\n`);

    const inlineKeyboard = [
      [{ text: 'üìú –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–µ—Ç–∏—Ü—ñ—é', url: petition.link }],
      [
        {
          text: selected ? 'üö´ –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –æ–±—Ä–∞–Ω–æ–≥–æ' : '‚≠êÔ∏è –î–æ–¥–∞—Ç–∏ –¥–æ –æ–±—Ä–∞–Ω–æ–≥–æ',
          callback_data: selected
            ? JSON.stringify({ key: 'petition:unselected', query: petition.number })
            : JSON.stringify({ key: 'petition:selected', query: petition.number })
        }
      ],
      [
        {
          text: '<<',
          callback_data: JSON.stringify({
            key: 'pagination:first',
            query: `0:${selected}:1`
          })
        },
        {
          text: '<',
          callback_data: JSON.stringify({
            key: 'pagination:prev',
            query: `${offset > 0 ? offset - 1 : 0}:${selected}:1`
          })
        },
        {
          text: `${offset + 1} / ${petitionsCount}`,
          callback_data: JSON.stringify({
            key: 'pagination:current',
            query: `${offset}:${selected}:1`
          })
        },
        {
          text: '>',
          callback_data: JSON.stringify({
            key: 'pagination:next',
            query: `${offset < petitionsCount - 1 ? offset + 1 : petitionsCount - 1}:${selected}:1`
          })
        },
        {
          text: '>>',
          callback_data: JSON.stringify({
            key: 'pagination:last',
            query: `${petitionsCount - 1}:${selected}:1`
          })
        }
      ]
    ];

    if (editable) {
      try {
        return await ctx.editMessageText(message.join(''), {
          link_preview_options: { is_disabled: true },
          reply_markup: { inline_keyboard: inlineKeyboard },
          parse_mode: 'HTML'
        });
      } catch (err) {
        return null;
      }
    } else {
      return await ctx.replyWithHTML(message.join(''), {
        link_preview_options: { is_disabled: true },
        reply_markup: { inline_keyboard: inlineKeyboard }
      });
    }
  }
}
